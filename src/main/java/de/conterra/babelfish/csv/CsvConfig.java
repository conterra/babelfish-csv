package de.conterra.babelfish.csv;

import de.conterra.babelfish.plugin.v10_02.object.geometry.*;
import de.conterra.babelfish.plugin.v10_02.object.geometry.Point;
import de.conterra.babelfish.plugin.v10_02.object.geometry.Polygon;
import de.conterra.babelfish.util.DataUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import java.awt.*;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Iterator;

/**
 * defines loader of configuration {@link File}s
 *
 * @author ChrissW-R1
 * @version 0.4.0
 * @since 0.1.0
 */
@Slf4j
public class CsvConfig {
	/**
	 * the default {@link Image}, which is used to draw {@link Point}s, if no other is specified
	 *
	 * @since 0.1.0
	 */
	public static final Image DEFAULT_IMAGE;
	
	static {
		int picSize = 26;
		DEFAULT_IMAGE = DataUtils.toImage(DataUtils.decodeBase64("")).getScaledInstance(picSize, picSize, Image.SCALE_SMOOTH);
	}
	
	/**
	 * a user-friendly description
	 *
	 * @since 0.1.0
	 */
	private String description;
	/**
	 * a text of copyright information
	 *
	 * @since 0.1.0
	 */
	private String                          copyright      = "";
	/**
	 * should the first row ignored, in case of headlines?
	 *
	 * @since 0.1.0
	 */
	private boolean                         ignoreFirstRow = true;
	/**
	 * the {@link GeometryObject} type
	 *
	 * @since 0.1.0
	 */
	private Class<? extends GeometryObject> geoType        = Point.class;
	/**
	 * column, in which the longitude is stored
	 *
	 * @since 0.1.0
	 */
	private int                             longColumn     = -1;
	/**
	 * column, in which the latitude is stored
	 *
	 * @since 0.1.0
	 */
	private int                             latColumn      = -1;
	/**
	 * column, in which the elevation is stored
	 *
	 * @since 0.1.0
	 */
	private int                             eleColumn      = -1;
	/**
	 * column, in which the CRS is stored
	 *
	 * @since 0.1.0
	 */
	private int                             crsColumn      = -1;
	/**
	 * column, in which the object ID is stored
	 *
	 * @since 0.2.4
	 */
	private int                             idColumn       = -1;
	/**
	 * columns, to group coordinates to {@link GeometryObject}s
	 *
	 * @since 0.1.0
	 */
	private int[]                           groupColumn    = new int[0];
	/**
	 * the {@link Color} to draw a line
	 *
	 * @since 0.1.0
	 */
	private Color                           lineColor      = Color.BLACK;
	/**
	 * the stroke to draw a line
	 *
	 * @since 0.1.0
	 */
	private int                             lineStroke     = 1;
	/**
	 * the {@link Color}, to fill {@link Polygon}s
	 *
	 * @since 0.1.0
	 */
	private Color                           fillColor      = Color.BLUE;
	/**
	 * the {@link Image}, which should be used to draw {@link Point}s
	 *
	 * @since 0.1.0
	 */
	private Image                           pointImage     = CsvConfig.DEFAULT_IMAGE;
	
	/**
	 * standard constructor
	 *
	 * @since 0.1.0
	 */
	private CsvConfig() {
	}
	
	/**
	 * constructor, with given configuration {@link File}
	 *
	 * @param file the configuration {@link File} to load
	 * @throws IllegalArgumentException if the given {@link File} doesn't exist
	 * @throws IOException              if an {@link Exception} occurred on reading the file
	 * @since 0.1.0
	 */
	private CsvConfig(File file)
	throws IllegalArgumentException, IOException {
		this();
		
		String fileName = file.getName();
		
		if (!(file.exists())) {
			throw new IllegalArgumentException("Config file " + fileName + " doesn't exist!");
		}
		
		try {
			Element rootNode = (new SAXBuilder()).build(file).getRootElement();
			
			Element child = rootNode.getChild("description");
			if (child != null) {
				this.description = child.getText();
			} else {
				this.description = fileName.substring(0, fileName.length() - ".xml".length());
			}
			
			child = rootNode.getChild("copyright");
			if (child != null) {
				this.copyright = child.getText();
			}
			
			child = rootNode.getChild("ignoreFirstRow");
			if (child != null) {
				this.ignoreFirstRow = Boolean.parseBoolean(child.getText());
			}
			
			child = rootNode.getChild("geoType");
			if (child != null) {
				String type = child.getText();
				
				try {
					@SuppressWarnings("unchecked")
					Class<? extends GeometryObject> clazz = (Class<? extends GeometryObject>) Class.forName(type);
					this.geoType = clazz;
				} catch (ClassNotFoundException | ClassCastException e) {
					if (type.equalsIgnoreCase("Polygon") || type.equalsIgnoreCase("Poly")) {
						this.geoType = Polygon.class;
					} else if (type.equalsIgnoreCase("Polyline") || type.equalsIgnoreCase("Line")) {
						this.geoType = Polyline.class;
					} else if (type.equalsIgnoreCase("MultiPoint")) {
						this.geoType = Multipoint.class;
					} else {
						this.geoType = Point.class;
					}
				}
			}
			
			child = rootNode.getChild("columns");
			if (child != null) {
				Element child2 = child.getChild("long");
				try {
					if (child2 != null) {
						this.longColumn = Integer.parseInt(child2.getText());
					}
				} catch (NumberFormatException e) {
				}
				
				child2 = child.getChild("lat");
				try {
					if (child2 != null) {
						this.latColumn = Integer.parseInt(child2.getText());
					}
				} catch (NumberFormatException e) {
				}
				
				child2 = child.getChild("ele");
				try {
					if (child2 != null) {
						this.eleColumn = Integer.parseInt(child2.getText());
					}
				} catch (NumberFormatException e) {
				}
				
				child2 = child.getChild("crs");
				try {
					if (child2 != null) {
						this.crsColumn = Integer.parseInt(child2.getText());
					}
				} catch (NumberFormatException e) {
				}
				
				child2 = child.getChild("objectId");
				try {
					if (child2 != null) {
						this.idColumn = Integer.parseInt(child2.getText());
					}
				} catch (NumberFormatException e) {
				}
				
				child2 = child.getChild("group");
				if (child2 != null) {
					String[] cols = child2.getText().split(",");
					this.groupColumn = new int[cols.length];
					int i = 0;
					for (String col : cols) {
						try {
							this.groupColumn[i] = Integer.parseInt(col);
						} catch (NumberFormatException e) {
						}
						
						i++;
					}
				}
			}
			
			child = rootNode.getChild("style");
			if (child != null) {
				Element child2 = child.getChild("line");
				if (child2 != null) {
					Element child3 = child2.getChild("color");
					if (child3 != null) {
						try {
							Color color = CsvConfig.getColor(child3.getText());
							
							if (color != null) {
								this.lineColor = color;
							} else {
								log.warn("Wrong syntax of the line color tag was used! E.g.: 'RED,GREEN,BLUE,ALPHA'");
							}
						} catch (NumberFormatException e) {
							log.warn("Couldn't parse color numbers for line color!", e);
						}
					}
					
					child3 = child2.getChild("stroke");
					if (child3 != null) {
						try {
							this.lineStroke = Integer.parseInt(child3.getText());
						} catch (NumberFormatException e) {
							log.warn("Couldn't parse stroke of line!", e);
						}
					}
				}
				
				child2 = child.getChild("fillColor");
				if (child2 != null) {
					Color color = CsvConfig.getColor(child2.getText());
					
					if (color != null) {
						this.fillColor = color;
					} else {
						log.warn("Wrong syntax of the fill color tag was used! E.g.: 'RED,GREEN,BLUE,ALPHA'");
					}
				}
				
				child2 = child.getChild("pointImage");
				if (child2 != null) {
					this.pointImage = DataUtils.toImage(DataUtils.decodeBase64(child2.getText()));
				}
			}
		} catch (JDOMException e) {
			throw new IOException("An error occurred on reading config file: " + fileName, e);
		}
	}
	
	/**
	 * gives a user-friendly description
	 *
	 * @return the description
	 *
	 * @since 0.1.0
	 */
	public String getDescription() {
		return this.description;
	}
	
	/**
	 * gives a text of copyright information
	 *
	 * @return the copyright text
	 *
	 * @since 0.1.0
	 */
	public String getCopyright() {
		return this.copyright;
	}
	
	/**
	 * should the first row ignored, in case of headlines?
	 *
	 * @return {@code true}, if the first row should be ignored
	 *
	 * @since 0.1.0
	 */
	public boolean isIgnoreFirstRow() {
		return this.ignoreFirstRow;
	}
	
	/**
	 * gives the {@link GeometryObject} type
	 *
	 * @return the {@link GeometryObject} type
	 *
	 * @since 0.1.0
	 */
	public Class<? extends GeometryObject> getGeoType() {
		return this.geoType;
	}
	
	/**
	 * gives the column, in which the longitude is stored
	 *
	 * @return the column, in which the longitude is stored or a negative {@link Integer}, if no column is specified (headlines should be used)
	 *
	 * @since 0.2.0
	 */
	public int getLongColumn() {
		return this.longColumn;
	}
	
	/**
	 * gives the column, in which the latitude is stored
	 *
	 * @return the column, in which the latitude is stored or a negative {@link Integer}, if no column is specified (headlines should be used)
	 *
	 * @since 0.2.0
	 */
	public int getLatColumn() {
		return this.latColumn;
	}
	
	/**
	 * gives the column, in which the elevation is stored
	 *
	 * @return the column, in which the elevation is stored or a negative {@link Integer}, if no column is specified (headlines should be used)
	 *
	 * @since 0.2.0
	 */
	public int getEleColumn() {
		return this.eleColumn;
	}
	
	/**
	 * gives the column, in which the CRS is stored
	 *
	 * @return the column, in which the CRS is stored or a negative {@link Integer}, if no column is specified (headlines should be used)
	 *
	 * @since 0.1.0
	 */
	public int getCrsColumn() {
		return this.crsColumn;
	}
	
	/**
	 * gives the column, in which the object ID is stored
	 *
	 * @return the column, in which the object ID is stored or a negative {@link Integer}, if no column is specified (headlines should be used)
	 *
	 * @since 0.2.4
	 */
	public int getIdColumn() {
		return this.idColumn;
	}
	
	/**
	 * gives an array of columns, to group coordinates to {@link GeometryObject}s
	 *
	 * @return an array of columns, to group coordinates to {@link GeometryObject}s, if the array is empty the coordinates should not grouped
	 *
	 * @since 0.1.0
	 */
	public int[] getGroupColumn() {
		return this.groupColumn.clone();
	}
	
	/**
	 * gives the {@link Color} to draw a line
	 *
	 * @return the {@link Color} to draw a line
	 *
	 * @since 0.1.0
	 */
	public Color getLineColor() {
		return this.lineColor;
	}
	
	/**
	 * gives the stroke to draw a line
	 *
	 * @return the stroke to draw a line
	 *
	 * @since 0.1.0
	 */
	public int getLineStroke() {
		return this.lineStroke;
	}
	
	/**
	 * gives the {@link Color}, to fill {@link Polygon}s
	 *
	 * @return the {@link Color}, to fill {@link Polygon}s
	 *
	 * @since 0.1.0
	 */
	public Color getFillColor() {
		return this.fillColor;
	}
	
	/**
	 * gives the {@link Image}, which should be used to draw {@link Point}s
	 *
	 * @return the {@link Image}, which should be used to draw {@link Point}s
	 *
	 * @since 0.1.0
	 */
	public Image getPointImage() {
		return this.pointImage;
	}
	
	/**
	 * extracts the color numbers from a {@link String} and creates a {@link Color}
	 *
	 * @param text the {@link String} with syntax "RED,GREEN,BLUE,ALPHA" (alpha is optional)
	 * @return the generated {@link Color} or {@code null}, is the syntax is corrupted
	 *
	 * @throws NumberFormatException if the {@link String} contains non-numeric characters
	 * @since 0.1.0
	 */
	private static Color getColor(String text)
	throws NumberFormatException {
		String[] colors = text.split(",");
		if (colors.length >= 3) {
			int alpha;
			
			if (colors.length >= 4) {
				alpha = Integer.parseInt(colors[3]);
			} else {
				alpha = 255;
			}
			
			return new Color(Integer.parseInt(colors[0]), Integer.parseInt(colors[1]), Integer.parseInt(colors[2]), alpha);
		}
		
		return null;
	}
	
	/**
	 * gives the {@link CsvConfig} of a CSV {@link File}
	 *
	 * @param file the CSV {@link File} to get the loader of
	 * @return the {@link CsvConfig} of {@code file} or {@code null}, if no configuration file exists of the given {@link File}
	 *
	 * @throws IOException if no configuration file exists and no configuration could load from headlines
	 * @since 0.1.0
	 */
	public static CsvConfig getConfig(File file)
	throws IOException {
		String fileName  = file.getName();
		String extension = ".xml";
		if (!(fileName.endsWith(extension))) {
			File configFile = new File(file.getAbsoluteFile() + extension);
			
			CsvConfig config = null;
			try {
				config = new CsvConfig(configFile);
			} catch (IllegalArgumentException | IOException e) {
				log.info("Couldn't read config file of CSV file: " + fileName, e);
			}
			
			Reader reader = null;
			try {
				if (config == null) {
					config = new CsvConfig();
					
					config.description = "Content of file: " + fileName;
				}
				
				int lon = config.getLongColumn();
				int lat = config.getLatColumn();
				int ele = config.getEleColumn();
				int crs = config.getCrsColumn();
				int id  = config.getIdColumn();
				
				reader = new FileReader(file);
				Iterator<CSVRecord> records = CSVFormat.EXCEL.parse(reader).iterator();
				
				if (records.hasNext()) {
					CSVRecord record = records.next();
					
					int i = 0;
					for (String header : record) {
						if (i != lon && i != lat && i != ele && i != crs && i != id) {
							if (lon < 0 && (header.equalsIgnoreCase("long") || header.equalsIgnoreCase("lon") || header.equalsIgnoreCase("longitude") || header.equalsIgnoreCase("x"))) {
								lon = i;
							} else if (lat < 0 && (header.equalsIgnoreCase("lat") || header.equalsIgnoreCase("latitude") || header.equalsIgnoreCase("y"))) {
								lat = i;
							} else if (ele < 0 && (header.equalsIgnoreCase("ele") || header.equalsIgnoreCase("elevation") || header.equalsIgnoreCase("z"))) {
								ele = i;
							} else if (crs < 0 && (header.equalsIgnoreCase("CRS") || header.equalsIgnoreCase("EPSG") || header.equalsIgnoreCase("SRS"))) {
								crs = i;
							} else if (id < 0 && (header.equalsIgnoreCase("ID") || header.equalsIgnoreCase("ObjectID") || header.equalsIgnoreCase("UID"))) {
								id = i;
							}
						}
						
						i++;
					}
				}
				
				if (lon < 0 || lat < 0 || crs < 0) {
					throw new IOException("A configuration file or column headers of coordinates and reference system are necessary!");
				}
				
				config.longColumn = lon;
				config.latColumn = lat;
				config.eleColumn = ele;
				config.crsColumn = crs;
				config.idColumn = id;
				
				return config;
			} catch (IOException e) {
				throw new IOException("Couldn't read column names from CSV file: " + fileName, e);
			} finally {
				DataUtils.closeStream(reader);
			}
		}
		
		String msg = "The given CSV file ends with '" + extension + "', so it is a config file --> ignore.";
		log.debug(msg);
		throw new IllegalArgumentException(msg);
	}
}
